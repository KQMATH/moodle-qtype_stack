define(["jquery","./mathquill"],function(s,e){let t=null;class a{constructor(s,e,t){this.name=s,this.text=e,this.onClick=t,this.$element=null}enable(){if(null!==this.$element)return;let e=document.createElement("button");this.$element=s(e),this.$element.html(this.text),this.$element.addClass("visual-math-input-control btn btn-primary"),this.$element.on("click",s=>{s.preventDefault(),null!==t&&(this.onClick(t.field),t.field.focus())})}}return{Input:class{constructor(a,n){this.$input=s(a),this.$parent=s(n);let l=document.createElement("div");this.wrapper=s(l).addClass("visual-math-input-field");let i=e.getInterface(2);this.field=i.MathField(l,{spaceBehavesLikeTab:!0,handlers:{edit:e=>{this.onEdit(s(a),e)}}}),this.$parent.append(l),this.onEdit=((s,e)=>s.val("\\[ "+e.latex()+" \\]")),this.$textarea.on("blur",()=>t=this)}get $textarea(){return s(this.field.el()).find("textarea")}enable(){this.$textarea.prop("disabled",!1)}disable(){this.$textarea.prop("disabled",!0)}},Control:a,ControlList:class{constructor(e){this.controls=[],this.$wrapper=s(e),this.$wrapper.addClass("visual-math-input-wrapper"),this.defineDefault()}define(s,e,t){this.controls[s]=new a(s,e,t)}enable(s){for(let e of s){let s=this.controls[e];s.enable(),this.$wrapper.append(s.$element)}}enableAll(){for(let s in this.controls){let e=this.controls[s];e.enable(),this.$wrapper.append(e.$element)}}defineDefault(){let s='<div class="mq-math-mode" style="cursor:pointer;font-size:100%;">';s+='<span class="mq-root-block">',s+='<span class="mq-non-leaf">',s+='<span class="mq-paren mq-scaled" style="transform: scale(0.8, 1.5);">(</span>',s+='<span class="mq-non-leaf" style="margin-top:0;">',s+='<span class="mq-array mq-non-leaf">',s+='<span style="font-size: 14px;"><var>n</var></span>',s+='<span style="font-size: 14px;"><var>k</var></span>',s+="</span></span>",s+='<span class="mq-paren mq-scaled" style="transform: scale(0.8, 1.5);">)</span></span>',s+="</span></div>";let e='<div class="mq-math-mode" style="cursor:pointer;font-size:100%;">';e+='<span class="mq-root-block">',e+="<var>x</var>",e+='<span class="mq-supsub mq-non-leaf mq-sup-only">',e+='<span class="mq-sup">',e+="<var>y</var>",e+="</span></span></span></div>",this.define("sqrt",'<span class="mq-root-block">&radic;</span>',s=>s.cmd("\\sqrt")),this.define("int",'<span class="mq-root-block">&int;</span>',s=>s.cmd("\\int")),this.define("sum",'<span class="mq-root-block"><span class="mq-large-operator mq-non-leaf">&sum;</span></span>',s=>s.cmd("\\sum")),this.define("lim",'<span class="mq-root-block">lim</span>',s=>{s.cmd("\\lim").typedText("_").write("x").cmd("\\to").write("0").moveToRightEnd()}),this.define("nchoosek",s,s=>s.cmd("\\choose")),this.define("divide",'<span class="mq-root-block">/</span>',s=>s.cmd("\\frac")),this.define("plusminus",'<span class="mq-root-block">&plusmn;</span>',s=>s.cmd("\\pm")),this.define("theta",'<span class="mq-root-block">&theta;</span>',s=>s.cmd("\\theta")),this.define("pi",'<span class="mq-root-block">&pi;</span>',s=>s.cmd("\\pi")),this.define("infinity",'<span class="mq-root-block">&infin;</span>',s=>s.cmd("\\infinity")),this.define("caret",e,s=>s.cmd("^"))}}}});